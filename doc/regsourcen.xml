<?xml version="1.0" encoding="utf-8"?>
<fpdoc-descriptions>
  <package name="RegistrySource">
    <!--
  ====================================================================
    regsourcen
  ====================================================================
-->
    <module name="regsourcen">
      <element name="TRegistrySettingsList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.FItemsByRegistry">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.FListSection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.FSourceKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.Section">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.Ident">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.ItemsByRegistry">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.ListSection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.SourceKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsList.MergeData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.FItemsByRegistry">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.FListSection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.FSourceKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList._Initialize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList._Finalize">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.SourceKind">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.Section">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.Ident">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.ItemsByRegistry">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.ListSection">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySettingsCheckedList.MergeData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomRegistrySource">
        <short>Custom-Klasse der RegistrySource</short>
        <descr>Definiert alle Eigenschaften und Methoden, welche in den Instanzklassen zum Einsatz kommen.</descr>
      </element>
      <element name="TCustomRegistrySource.FRootKey">
        <short>s. RootKey</short>
      </element>
      <element name="TCustomRegistrySource.FRootKeyForDefaults">
        <short>s. RootKeyForDefaults</short>
      </element>
      <element name="TCustomRegistrySource.FRootKeyForCommon">
        <short>s. RootKeyForCommon</short>
      </element>
      <element name="TCustomRegistrySource.FProject">
        <short>s. Project</short>
      </element>
      <element name="TCustomRegistrySource.FOrganisation">
        <short>s. Organisation</short>
      </element>
      <element name="TCustomRegistrySource.FRootForDefaults">
        <short>s. RootForDefault</short>
      </element>
      <element name="TCustomRegistrySource.FReadDefaults">
        <short>s. ReadDefaults</short>
      </element>
      <element name="TCustomRegistrySource.FWriteDefaults">
        <short>s. WriteDefaults</short>
      </element>
      <element name="TCustomRegistrySource.FGUID">
        <short>s. GUID</short>
      </element>
      <element name="TCustomRegistrySource.FClientList">
        <short>Clientliste</short>
        <descr>In der Clientliste werden die angschlossenen Clients verwaltet.</descr>
      </element>
      <element name="TCustomRegistrySource.FDoSyncData">
        <short>s. DoSyncData</short>
      </element>
      <element name="TCustomRegistrySource.FPrefereStrings">
        <short>s. PrefereStrings</short>
      </element>
      <element name="TCustomRegistrySource.FEditClientRootKeys">
        <short>s. EditClientRootKeys</short>
      </element>
      <element name="TCustomRegistrySource.OnSyncData">
        <short>Synchronisation</short>
        <descr>Wenn DoSyncData auf True steht, wird dieses Ereignis die Synchronisation der Clients einleiten.</descr>
      </element>
      <element name="TCustomRegistrySource.OnSyncData.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.DeliverMessage">
        <short>Botschaften an die Clients senden</short>
        <descr>Mit dieser Methode werden die Botschaften an die Clients versendet</descr>
      </element>
      <element name="TCustomRegistrySource.DeliverMessage.aMessageConst">
        <short>Message-Konstante</short>
      </element>
      <element name="TCustomRegistrySource.DeliverMessage.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.DeliverMessage.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.
Der GroupIndex wird über lParam einer Message versandt.</descr>
      </element>
      <element name="TCustomRegistrySource.DeliverMessage.aWParam">
        <short>wParam für eine Message</short>
      </element>
      <element name="TCustomRegistrySource.RootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.RootKeyForDefaults">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomRegistrySource.RootKeyForCommon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomRegistrySource.Project">
        <short>Projektname</short>
        <descr>Ein Registryschlüssel sollte immer den Projektnamen mit im Aufbau aufnehmen.
Die Organisation kann durch die Variable \%%PROJECT%% repräsentiert werden.
z.B.: SOFTWARE\ExampleFactory\%%PROJECT%%\{7CB5D48B-FCE3-414F-BB3A-BCB07BC5D25F}</descr>
      </element>
      <element name="TCustomRegistrySource.Organisation">
        <short>Organisation</short>
        <descr>Ein Registryschlüssel sollte immer die Organisation mit im Aufbau aufnehmen.
Die Organisation kann durch die Variable %%ORGANISATION%% repräsentiert werden.
z.B.: SOFTWARE\%%ORGANISATION%%\LazarusRegistryControls\{7CB5D48B-FCE3-414F-BB3A-BCB07BC5D25F}</descr>
      </element>
      <element name="TCustomRegistrySource.RootForDefaults">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TCustomRegistrySource.ReadDefaults">
        <short>Lesen von Standards</short>
        <descr>Wenn ReadDefaults auf True steht werden Standards aus der Registry ermittelt. Standards kommen immer dann zum Einsatz, wenn eine Abfrage kein Ergebnis liefert.
Standards werden aus RootKeyForDefaults gelesen, wobei RootKeyForDefaults in RootForDefaults installiert wird.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteDefaults">
        <short>Schreiben von Standards</short>
        <descr>Wenn WriteDefaults auf True steht werden Standards in der Registry verändert. 
Standards kommen immer dann zum Einsatz, wenn eine Abfrage kein Ergebnis liefert.
Standards werden aus RootKeyForDefaults gelesen, wobei RootKeyForDefaults in RootForDefaults installiert wird.</descr>
      </element>
      <element name="TCustomRegistrySource.GUID">
        <short>Projekt-GUID</short>
        <descr>Für jedes Projekt kann eine Projekt-GUID vergeben werden. 
Diese GUID kann dazu genutzt werden, eine Anwendung unter verschiedenen Versionen auf einem Client auszuführen. 
Voraussetzung ist, das jede Version ihre eigene Projekt-GUID besitzt. 
Die Projekt-GUID kann durch die Variable %%GUID%% repräsentiert werden.
z.B.: SOFTWARE\ExampleFactory\LazarusRegistryControls\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.DoSyncData">
        <short>Synchronisierung</short>
        <descr>Die Eigenschaft bestimmt ob Clients überhaupt synchronisiert werden können. Die Synchronisierung wird immer dann ausgeführt, wenn ein Steuerlement Änderungen in der Registry vornimmt.</descr>
      </element>
      <element name="TCustomRegistrySource.PrefereStrings">
        <short>Strings anwenden</short>
        <descr>Wenn diese Eigenschaft auf True steht, werden alle Daten der Steuerelemente ausnahmslos als Strings in die Registry geschrieben.
Dies gilt auch für die Standards, wenn WriteDefaults auf True steht.</descr>
      </element>
      <element name="TCustomRegistrySource.GetClientCount">
        <short>s. CllientCount</short>
        <descr>Methodenzeiger</descr>
      </element>
      <element name="TCustomRegistrySource.GetClientCount.Result">
        <short>s. ClientCount</short>
      </element>
      <element name="TCustomRegistrySource.ClientCount">
        <short>Anzahl angeschlossener Clients</short>
        <descr>Es wird die Anzahl aus der ClientList ermittelt.</descr>
      </element>
      <element name="TCustomRegistrySource.EditClientRootKeys">
        <short>RootKeys am Client bearbeiten</short>
        <descr>Wenn True, wird der Bearbeitungsdialog für RootKeys eines Clients im Bearbeitungsmodus gestartet.</descr>
      </element>
      <element name="TCustomRegistrySource.PostClientData">
        <short>Daten schreiben</short>
        <descr>Mit dieser Methoden können Clients veranlasst werden, Daten in die Registry zu schreiben wenn DoWriteAdHoc auf False steht.</descr>
      </element>
      <element name="TCustomRegistrySource.PostClientData.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.PostClientData.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshMergeDataProperty">
        <short>Aktualisert MergeData-Eigenschaft</short>
        <descr>Clienteigenschaft anpassen</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshMergeDataProperty.aMergeData">
        <short>Neuer Wert (True/False)</short>
      </element>
      <element name="TCustomRegistrySource.RefreshMergeDataProperty.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshMergeDataProperty.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.GetClientList">
        <short>Kopie der ClientListe erstellen</short>
      </element>
      <element name="TCustomRegistrySource.GetClientList.Result">
        <short>True wenn Clients gefunden</short>
      </element>
      <element name="TCustomRegistrySource.GetClientList.aList">
        <short>Kopie</short>
      </element>
      <element name="TCustomRegistrySource.ClearClientItems">
        <short>Löscht am Client eine Liste</short>
        <descr>Steuerelemente welche Listen präsentieren (z.B.: TRegListBox), können über das Triggern einer Message gelöscht werden.</descr>
      </element>
      <element name="TCustomRegistrySource.ClearClientItems.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.ClearClientItems.aAskFor">
        <short>Soll eine Benutzeranfrage gestellt werden</short>
        <descr>Wenn True wird erst eine Benutzeranfrage gestellt, welche immer mit mrYES beantwortet werden muss.</descr>
      </element>
      <element name="TCustomRegistrySource.ClearClientItems.aMsg">
        <short>Frei formulierte Benutzeranfrage</short>
        <descr>Wenn vor dem Löschen eine Benutzeranfrage gestellt werden soll, kann ein freier Text formuliert werden. Die Anfrage muss so gestellt werden, das eine positiver Bescheid zum löschen mit mrYES beantwortet wird.</descr>
      </element>
      <element name="TCustomRegistrySource.ClearClientItems.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteRootKey">
        <short>RootKey löschen</short>
        <descr>Es werden alle bekannten Sectionen von RootKey gelöscht. 
RootKey selber bleibt erhalten.
Wenn Standards aus der Registry verwendet werden und WriteDefaults der RegistrySettings auf True steht, wird auch der Schlüssel der Standards bearbeitet.</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteRootKey.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteRootKey.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteRootKey.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteRootKey.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.RenameClient">
        <short>Client umbenennen</short>
        <descr>Wird der Name eines Steuerelementes geändert, muss auch der Name in der ClientList geändert werden.</descr>
      </element>
      <element name="TCustomRegistrySource.RenameClient.aOldName">
        <short>Alter Name des Clients</short>
      </element>
      <element name="TCustomRegistrySource.RenameClient.aNewName">
        <short>Neuer Name des Clients</short>
      </element>
      <element name="TCustomRegistrySource.ShowClientEditDialog">
        <short>RootKeys eines Client einsehen/bearbeiten</short>
      </element>
      <element name="TCustomRegistrySource.ShowClientEditDialog.aClientName">
        <short>Name eines Client</short>
      </element>
      <element name="TCustomRegistrySource.GetClientByName">
        <short>Client-Komponente ermitteln</short>
        <descr>Anhand des Clientnamens wird eine Client-Komponente aus der ClientList ermittelt.</descr>
      </element>
      <element name="TCustomRegistrySource.GetClientByName.Result">
        <short>Clientkomponente</short>
      </element>
      <element name="TCustomRegistrySource.GetClientByName.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.GetClientNameByIndex">
        <short>Name des Clients ermitteln</short>
        <descr>Name des Clients aus der ClientList anhand des Index ermitteln</descr>
      </element>
      <element name="TCustomRegistrySource.GetClientNameByIndex.Result">
        <short>Name des Clients</short>
      </element>
      <element name="TCustomRegistrySource.GetClientNameByIndex.aIndex">
        <short>Index</short>
      </element>
      <element name="TCustomRegistrySource.FreeRegistrySource">
        <short>Entfernen der RegistrySource</short>
        <descr>Mit dieser Methode wird die RegistrySouce an einem Client entfernt.</descr>
      </element>
      <element name="TCustomRegistrySource.FreeRegistrySource.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.FreeRegistrySource.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshWriteAdHocProperty">
        <short>Clienteigenschaft aktualisieren</short>
      </element>
      <element name="TCustomRegistrySource.RefreshWriteAdHocProperty.aDoWriteAdHoc">
        <short>Neuer Wert (True/False)</short>
      </element>
      <element name="TCustomRegistrySource.RefreshWriteAdHocProperty.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshWriteAdHocProperty.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshSyncProperty">
        <short>Clienteigenschaft aktualisieren</short>
      </element>
      <element name="TCustomRegistrySource.RefreshSyncProperty.aDoSync">
        <short>Neuer Wert (True/False)</short>
      </element>
      <element name="TCustomRegistrySource.RefreshSyncProperty.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshSyncProperty.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshSettings">
        <short>Rootkeys aktualisieren</short>
      </element>
      <element name="TCustomRegistrySource.RefreshSettings.aClientName">
        <short>Names eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshClientData">
        <short>Clients aktualisieren</short>
        <descr>Aktualisiert die Clients mit Daten aus der Registry.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshClientData.aClientName">
        <short>Name eines Clients</short>
        <descr>Wenn nicht alle Clients einer RegistrySource bearbeitet werden sollen, wird hier der konkrete Name eines Clients erwartet. Ein Leerstring wird alle Clients bearbeiten.</descr>
      </element>
      <element name="TCustomRegistrySource.RefreshClientData.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.RegisterClient">
        <short>Client registrieren</short>
        <descr>Registriert einen Client und fügt ihn in die ClientList ein.</descr>
      </element>
      <element name="TCustomRegistrySource.RegisterClient.aClient">
        <short>Client-Komponente</short>
      </element>
      <element name="TCustomRegistrySource.UnRegisterClient">
        <short>Client entfernen</short>
        <descr>Client aus der ClientList entfernen</descr>
      </element>
      <element name="TCustomRegistrySource.UnRegisterClient.aClient">
        <short>Client-Komponente</short>
      </element>
      <element name="TCustomRegistrySource.GetRootKey">
        <short>Grundschlüssel ermitteln</short>
        <descr>Die Methode wird die Variablen %%PROJECT%%, %%ORGANISATION%% und %%GUID%% ersetzen und den Grundschlüssel ermitteln. 
Der RootKey ist immer ein Schlüssel unterhalb von HKEY_CURRENT_USER.
z.B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.GetRootKey.Result">
        <short>Übersetzter Grundschlüssel</short>
      </element>
      <element name="TCustomRegistrySource.GetRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Die Methode wird die Variablen %%PROJECT%%, %%ORGANISATION%% und %%GUID%% ersetzen und den Grundschlüssel für Standards ermitteln.
Der RootKeyForDefaults ist immer ein Schlüssel unterhalb von <link id="TCustomRegistrySource.RootForDefaults">RootForDefaults</link>
z.B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\DEFAULTS\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.GetRootKeyForDefaults.Result">
        <short>Übersetzter Grundschlüssel für Standards</short>
      </element>
      <element name="TCustomRegistrySource.GetRootKeyForCommon">
        <short>Grundschlüssel für allgemeine Daten</short>
        <descr>Die Methode wird die Variablen %%PROJECT%%, %%ORGANISATION%% und %%GUID%% ersetzen und den Grundschlüssel für allgemeine Daten ermitteln.
Der RootKeyForCommon ist immer ein Schlüssel unterhalb von HKEY_CURRENT_USER.
SOFTWARE\%%ORGANISATION%%\GEMEINSAME DATEN\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.GetRootKeyForCommon.Result">
        <short>Übersetzter Grundschlüssel für allgemeine Daten</short>
      </element>
      <element name="TCustomRegistrySource.ReadString">
        <short>String ermitteln</short>
        <descr>Anhand des RootKeys, innerhalb einer Section für einen Ident einen String ermittelt. 
Wenn dieser Vorgang kein Ergebnis liefert:
Wenn ReadDefaults auf True dann Wert anhand von RootKeyForDefaults, innerhalb einer Section für den Ident einen String ermitteln.
Wenn ReadDefaults auf False dann Wert aus Default ermitteln.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadString.Result">
        <short>Ergebnis der Abfrage</short>
      </element>
      <element name="TCustomRegistrySource.ReadString.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.ReadString.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.ReadString.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadString.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.ReadString.aIdent">
        <short>Ident des Datenpaares</short>
        <descr>Identifizierung des Wertes in der Registry.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadString.aDefault">
        <short>Standardwert</short>
        <descr>Wenn ReadDefaults auf False steht, wird dieser Wert immer dann verwendet, wenn die Abfrage auf die Registry kein Ergebnis liefert.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadString.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.ReadInteger">
        <short>Integer ermitteln</short>
        <descr>Anhand des RootKeys, innerhalb einer Section für einen Ident einen Integer Wert ermittelt. 
Wenn dieser Vorgang kein Ergebnis liefert:
Wenn ReadDefaults auf True dann Wert anhand von RootKeyForDefaults, innerhalb einer Section für den Ident einen Integer Wert ermitteln.
Wenn ReadDefaults auf False dann Wert aus Default ermitteln.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.Result">
        <short>Ergebnis der Abfrage</short>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.aIdent">
        <short>Ident des Datenpaares</short>
        <descr>Identifizierung des Wertes in der Registry.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.aDefault">
        <short>Standardwert</short>
        <descr>Wenn ReadDefaults auf False steht, wird dieser Wert immer dann verwendet, wenn die Abfrage auf die Registry kein Ergebnis liefert.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadInteger.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.ReadBool">
        <short>Boolean ermitteln</short>
        <descr>Anhand des RootKeys, innerhalb einer Section für einen Ident einen boolscher Wert ermittelt. 
Wenn dieser Vorgang kein Ergebnis liefert:
Wenn ReadDefaults auf True dann Wert anhand von RootKeyForDefaults, innerhalb einer Section für den Ident einen boolschen Wert ermitteln.
Wenn ReadDefaults auf False dann Wert aus Default ermitteln.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadBool.Result">
        <short>Ergebnis der Abfrage</short>
      </element>
      <element name="TCustomRegistrySource.ReadBool.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.ReadBool.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.ReadBool.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadBool.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.ReadBool.aIdent">
        <short>Ident des Datenpaares</short>
        <descr>Identifizierung des Wertes in der Registry.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadBool.aDefault">
        <short>Standardwert</short>
        <descr>Wenn ReadDefaults auf False steht, wird dieser Wert immer dann verwendet, wenn die Abfrage auf die Registry kein Ergebnis liefert.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadBool.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.ReadSection">
        <short>Inhalt einer Sektion</short>
        <descr>Liest alle Datenpaare einer Sektion in eine Liste ein. Diese Liste kann z.B. Quelle für eine Steuerlement sein, welches eine Liste repräsentiert (z.B.: TRegListBox).</descr>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
        <descr>Ein Steuerelement welches eine Liste repräsentiert, bekommt aus dieser Quelle seine Daten für die Liste.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aStrings">
        <short>Quelle der Liste</short>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aMerge">
        <short>Listendaten Mergen</short>
        <descr>Wenn True dann wenn ReadDefaults auf True und Listendaten nicht vollständig dann Einträge aus den Standards ergänzen wenn möglich.</descr>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.ReadSection.aListSource">
        <short>Datenzusammensetzung</short>
        <descr>Über diesen Parameter wird bestimmt wie die Daten für ein Listenelement aussehen sollen.
byKey: Es werden alle Idents in die Liste geladen 
byValue: Es werden alle beigeordneten Werte der Idents in die Liste geladen
Both: Es werden Ident und Value in folgender Syntax geladen: Ident=Value</descr>
      </element>
      <element name="TCustomRegistrySource.WriteString">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomRegistrySource.WriteString.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.WriteString.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.WriteString.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteString.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.WriteString.aIdent">
        <short>Ident des Datenpaares</short>
        <descr>Identifizierung des Wertes in der Registry.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteString.aDefault">
        <short>Übergabewert</short>
        <descr>Wert wird in die Registry geschrieben</descr>
      </element>
      <element name="TCustomRegistrySource.WriteString.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.WriteString.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteInteger">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aIdent">
        <short>Ident des Datenpaares</short>
        <descr>Identifizierung des Wertes in der Registry.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aDefault">
        <short>Übergabewert</short>
        <descr>Wert wird in die Registry geschrieben</descr>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.WriteInteger.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteBool">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aIdent">
        <short>Ident des Datenpaares</short>
        <descr>Identifizierung des Wertes in der Registry.</descr>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aDefault">
        <short>Übergabewert</short>
        <descr>Wert wird in die Registry geschrieben</descr>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.WriteBool.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.RenameKey">
        <short>Ident umbenennen</short>
        <descr>Unterhalb einer Section wird ein Ident umbenannt.</descr>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aOldKey">
        <short>Alter Name</short>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aNewKey">
        <short>Neuer Name</short>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.RenameKey.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteKey">
        <short>Löscht einen Schlüssel</short>
        <descr>Wenn Standards aus der Registry verwendet werden und WriteDefaults der RegistrySettings auf True steht, wird auch der Schlüssel der Standards bearbeitet.</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteKey.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteKey.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteKey.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteKey.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.DeleteKey.aKey">
        <short>Schlüssel</short>
        <descr>Der hier aufgeführte Schlüssel wird gelöscht.</descr>
      </element>
      <element name="TCustomRegistrySource.DeleteKey.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.DeleteKey.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.EraseSection">
        <short>Entfernt alle Datenpaare einer Section</short>
      </element>
      <element name="TCustomRegistrySource.EraseSection.aRootKey">
        <short>Grundschlüssel</short>
        <descr>Dies ist der Schlüssel unter dem alle Einträge verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.EraseSection.aRootKeyForDefaults">
        <short>Grundschlüssel für Standards</short>
        <descr>Dies ist der Schlüssel unter dem alle Standards verschiedener Steuerelemente eingetragen werden.  
Dabei kommen die Informationen aus den Eigenschaften Organisation, Project und GUID zum tragen. 
z. B.: SOFTWARE\%%ORGANISATION%%\%%PROJECT%%\%%GUID%%</descr>
      </element>
      <element name="TCustomRegistrySource.EraseSection.aRootForDefaults">
        <short>Root für Standards</short>
        <descr>Werden Standards aus der Registry gelesen, wird hier das Registry-Root für Standards eingetragen, z.B.: HKEY_LOCAL_MACHINE.</descr>
      </element>
      <element name="TCustomRegistrySource.EraseSection.aSection">
        <short>Sektion für Datenpaare (Ident=Value)</short>
      </element>
      <element name="TCustomRegistrySource.EraseSection.aUseDefaults">
        <short>Standards benutzen?</short>
      </element>
      <element name="TCustomRegistrySource.EraseSection.aGroupIndex">
        <short>Gruppierung</short>
        <descr>Ein GroupIndex != 0 sorgt dafür, das nur Clients aktualisiert werden, welche den selben GroupIndex besitzen. Der GroupIndex=0 wird alle Clients aktualisieren.</descr>
      </element>
      <element name="TCustomRegistrySource.Create">
        <short>Erstellt die Instanz</short>
      </element>
      <element name="TCustomRegistrySource.Create.AOwner">
        <short>Eigentümer der RegistrySource</short>
      </element>
      <element name="TCustomRegistrySource.Destroy">
        <short>Entfernt die RegistrySource</short>
      </element>
      <element name="TRegistrySource">
        <short/>
        <descr/>
        <errors/>
        <seealso/>
      </element>
      <element name="TRegistrySource.ClientCount">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.EditClientRootKeys">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.RootKey">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.RootKeyForDefaults">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.RootKeyForCommon">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.Project">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.Organisation">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.RootForDefaults">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.ReadDefaults">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.WriteDefaults">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.GUID">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.DoSyncData">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="TRegistrySource.PrefereStrings">
        <short/>
        <descr/>
        <seealso/>
      </element>
      <element name="Register">
        <short>s. LCL Documentation</short>
        <descr>RegistrySettings und RegistrySource, sowie PropertyEditoren registrieren</descr>
      </element>
      <short>RegistrySource und RegistrySettings</short>
      <descr>In dem Modul werden zum einen RegistrySettings beschrieben welche in den verschiedenen Steuerelementen zum Einsatz kommen und zum anderen die RegistrySource zur Verfügung gestellt. 
Die Dokumentation ist in diesem Bereich nicht vorllständig, da zum Zeitpunkt der Erstellung FPDoc und MakeSkel keine Gernrics unterstützen. Dies bezieht sich ausschließlich auf die RegistrySettings.</descr>
    </module>
    <!-- regsourcen -->
  </package>
</fpdoc-descriptions>
